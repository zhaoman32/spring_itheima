<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring去管理-->
    <!--spring 对 bean 的管理细节
        1、创建bean的三种方式
        2、bean对象的作用范围
        3、bean的生命周期
    -->

    <!--创建bean的三种方式-->
    <!--1、默认构造函数创建，spring配置文件中使用bean标签，配以id-class属性，且没有其他标签。
    这句话是在找默认构造函数。类中没有默认构造函数时，无法创建
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>
    -->

    <!--2、使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
    -->

    <!--3、使用静态工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）
    <bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!--bean对象的作用范围
            bean标签的scope属性：用于指定bean的作用范围
                               取值：
                                    singleton：单例的（默认值），spring中默认的bean对象是单例的
                                    prototype：多例的
                                    request：作用于web应用的请求范围
                                    session：作用于web应用的会话范围
                                    global-session：作用于集群环境，负载均衡情况的会话范围（全局会话范围），当不是集群，用session
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="singleton"></bean>
    -->

    <!--bean的生命周期
            单例对象：生命周期和容器一致
                出生：容器创建时，对象出生
                活着：容器还在，对象就在
                死亡：容器销毁，对象销毁
            多例对象：
    -->
    <bean id="accountService"
          class="com.itheima.service.impl.AccountServiceImpl"
          scope="prototype"
          init-method="init"
          destroy-method="destory"
    ></bean>



</beans>