<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置spring的IOC，把service对象配置进来-->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>

    <!--spring中基于xml的AOP配置步骤
        1、把通知的bean也交给spring来管理
        2、使用aop:config标签表明开始AOP的配置
        3、使用aop:aspect标签配置切面
                id属性 : 给切面提供一个唯一标识
                ref属性：指定通知类bean的id
        4、在aop:aspect标签的内部使用对应的标签来配置通知的类型
                现在示例让printLog方法在切入点方法执行前执行，即前置通知
                aop:before 表示配置前置通知
                    method属性：指定Logger类中的哪个方法是前置通知
                    pointcut属性：指定切入点表达式，该表达式的含义是对业务层中的哪些方法增强

           切入点表达式的写法：
                关键字：execution(表达式)
                表达式：访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
                举例：public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                访问修饰符可省略：void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                返回式可以使用通配符表示任意返回值 * com.itheima.service.impl.AccountServiceImpl.saveAccount()
                包名可以使用通配符表示任意包，但是有几级包就需要写几个*
                    * *.*.*.*.AccountServiceImpl.saveAccount()
                包名可以用..表示当前包及其子包
                    * *..AccountServiceImpl.saveAccount()
                类名和方法名都可以用通配符* *..*.*()
                参数列表可以写数据类型，基本类型写名称int，引用类型写 包.类 java.lang.String 的方式
                    * *..*.*(int)
                参数用通配符表示任意类型，但是必须有参数* *..*.*(*)
                参数用..表示有无参数均可，有参数可以是任意类型
                全通配写法：* *..*.*(..)

                实际开发中的通常写法是：切到业务层实现类下的所有方法
                    * com.itheima.service.impl.*.*(..)
    -->
    <!--配置Logger类-->
    <bean id="logger" class="com.itheima.utils.Logger"></bean>

    <!--配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型并建立通知方法和切入点方法的关联-->
            <aop:before method="printLog" pointcut="execution( * com.itheima.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>
</beans>