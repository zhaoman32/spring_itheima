<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置spring的IOC，把service对象配置进来-->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>


    <!--配置Logger类-->
    <bean id="logger" class="com.itheima.utils.Logger"></bean>

    <!--配置AOP-->
    <aop:config>
        <!--配置切入点表达式 id指定表达式的唯一标志 expression指定表达式内容
                写在aop:aspect标签内部，只能当前切面使用
                也可以写在aop:aspect标签外，但是在切面之前-->
        <aop:pointcut id="pt1" expression="execution( * com.itheima.service.impl.*.*(..))"></aop:pointcut>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
<!--            &lt;!&ndash;配置前置通知, 在切入点方法执行之前执行&ndash;&gt;-->
<!--            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
<!--            &lt;!&ndash;配置后置通知, 在切入点方法正常执行之后执行&ndash;&gt;-->
<!--            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>-->
<!--            &lt;!&ndash;配置异常通知, 在切入点方法产生异常之后执行&ndash;&gt;-->
<!--            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>-->
<!--            &lt;!&ndash;配置最终通知, 无论切入点方法是否正常执行，都会在其后执行&ndash;&gt;-->
<!--            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->
<!--            &lt;!&ndash;        后置和异常永远只能执行一个        &ndash;&gt;-->
            <!--配置环绕通知,详细注释见Logger类-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>



        </aop:aspect>

    </aop:config>
</beans>